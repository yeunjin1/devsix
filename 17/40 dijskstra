import heapq

INF = int(1e9)
N, M = map(int, input().split())
graph = [[] for _ in range(N + 1)]
for _ in range(M):
    a, b = map(int, input().split())
    graph[a].append(b)
    graph[b].append(a)

distance = [INF] * (N + 1)
distance[1] = 0
q = []
heapq.heappush(q, (distance[1], 1))

while q:
    dist, now = heapq.heappop(q)
    if distance[now] < dist:
        continue
    for next in graph[now]:
        if dist + 1 < distance[next]:
            distance[next] = dist + 1
            heapq.heappush(q, (dist + 1, next))

ans2 = max(distance[1:])
ans1 = distance.index(ans2)
ans3 = 0
for d in distance:
    if d == ans2:
        ans3 += 1
print(ans1, ans2, ans3)




